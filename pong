import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new ball in middle of table
ball_pos = [0, 0]
ball_vel = [0, 0]

# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    horizontal = random.randrange(2, 4)
    vertical = random.randrange(1, 3)
    if direction == RIGHT:
        ball_vel = [horizontal, -vertical]
    elif direction == LEFT:
        ball_vel = [-horizontal, -vertical]
        
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
    paddle2_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
    paddle1_vel = 0
    paddle2_vel = 0
    if random.randrange(0,2) == 0:
        spawn_ball(True)
    else:
        spawn_vall(False)
    

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel 
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # bounces off top and bottom
    if int(ball_pos[1]) <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
    if int(ball_pos[1]) >= HEIGHT + 1 - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    # bounces off paddle or goes into a gutter
    # player 2 scores
    if int(ball_pos[0]) <= BALL_RADIUS + PAD_WIDTH and int(ball_pos[1]) in range(paddle1_pos[1] - HALF_PAD_HEIGHT, paddle1_pos[1] + HALF_PAD_HEIGHT):
        ball_vel[0] = -ball_vel[0] * 1.1
        ball_vel[1] *= 1.1
    elif int(ball_pos[0]) <= BALL_RADIUS + PAD_WIDTH:
        score2 += 1
        spawn_ball(RIGHT)
    # player 1 scores
    if int(ball_pos[0]) >= WIDTH + 1 - BALL_RADIUS - PAD_WIDTH and int(ball_pos[1]) in range(paddle2_pos[1] - HALF_PAD_HEIGHT, paddle2_pos[1] + HALF_PAD_HEIGHT):
        ball_vel[0] = -ball_vel[0] * 1.1
        ball_vel[1] *= 1.1
    elif int(ball_pos[0]) >= WIDTH + 1 - BALL_RADIUS - PAD_WIDTH:
        score1 += 1
        spawn_ball(LEFT)
            
    # draw ball
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "Orange", "Yellow")
    
    # update paddle's vertical position, keep paddle on the screen
    # paddle1
    if paddle1_pos[1] > HALF_PAD_HEIGHT and paddle1_pos[1] < HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos[1] += paddle1_vel
    elif paddle1_pos[1] == HALF_PAD_HEIGHT and paddle1_vel >= 0:
        paddle1_pos[1] += paddle1_vel
    elif paddle1_pos[1] == HEIGHT - HALF_PAD_HEIGHT and paddle1_vel <= 0:
        paddle1_pos[1] += paddle1_vel
    # paddle2
    if paddle2_pos[1] > HALF_PAD_HEIGHT and paddle2_pos[1] < HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos[1] += paddle2_vel
    elif paddle2_pos[1] == HALF_PAD_HEIGHT and paddle2_vel >= 0:
        paddle2_pos[1] += paddle2_vel
    elif paddle2_pos[1] == HEIGHT - HALF_PAD_HEIGHT and paddle2_vel <= 0:
        paddle2_pos[1] += paddle2_vel

    # draw paddles
    # paddle1
    paddle1_ul = (0, paddle1_pos[1] - HALF_PAD_HEIGHT)
    paddle1_ur = (PAD_WIDTH, paddle1_pos[1] - HALF_PAD_HEIGHT)
    paddle1_dr = (PAD_WIDTH, paddle1_pos[1] + HALF_PAD_HEIGHT)
    paddle1_dl = (0, paddle1_pos[1] + HALF_PAD_HEIGHT)
    c.draw_polygon([paddle1_ul, paddle1_ur, paddle1_dr, paddle1_dl], 1, "White", "White")
    #paddle2
    paddle2_ul = (WIDTH - PAD_WIDTH, paddle2_pos[1] - HALF_PAD_HEIGHT)
    paddle2_ur = (WIDTH, paddle2_pos[1] - HALF_PAD_HEIGHT)
    paddle2_dr = (WIDTH, paddle2_pos[1] + HALF_PAD_HEIGHT)
    paddle2_dl = (WIDTH - PAD_WIDTH, paddle2_pos[1] + HALF_PAD_HEIGHT)
    c.draw_polygon([paddle2_ul, paddle2_ur, paddle2_dr, paddle2_dl], 1, "White", "White")

    # draw scores
    c.draw_text(str(score1), [100, 100], 25, "white")
    c.draw_text(str(score2), [500, 100], 25, "white")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    # paddle1
    if key == simplegui.KEY_MAP["w"]:
       paddle1_vel = -5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 5
    # paddle2
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5

def keyup(key):
    global paddle1_vel, paddle2_vel
    # paddle1
    if key == simplegui.KEY_MAP["w"] or key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    # paddle2
    if key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 100)


# start frame
new_game()
frame.start()
