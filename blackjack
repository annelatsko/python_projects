# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
wins = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []
        pass	# create Hand object

    def __str__(self):
        hand_information = "Hand contains " + " ".join(str(i) for i in self.hand)
        return hand_information
        pass	# return a string representation of a hand
    
    def add_card(self, card):
        self.hand.append(card)
        pass	# add a card object to a hand

    def get_value(self):
        hand_value = 0  
        ace = 0
        for card in self.hand:
            rank = card.get_rank()
            hand_value += VALUES.get(rank)
            if rank == "A":
                ace += 1
        if (hand_value + 10) < 21 and ace > 0:
            hand_value += 10 
        return hand_value   
        pass	# compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        i = pos[ : ]  
        if len(self.hand) == 0:  
            return  
        for m in range(0, len(self.hand)):  # draw a hand on the canvas, use the draw method for cards  
            self.hand[m].draw(canvas,i)  
            i[0] += 100  
        pass 	# draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit, rank))
                pass
                                 
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)
        pass    # use random.shuffle()

    def deal_card(self):
        return self.deck.pop()
        pass	# deal a card object from the deck
    
    def __str__(self):
        deck_str = ""
        for cards in self.deck:
            deck_str += str(cards) + "  "        
            deck_information = "Deck contains " + deck_str
        return deck_information
        pass	# return a string representing the deck 

#define event handlers for buttons
def deal():
    global deck, outcome, in_play, dealer_hand, player_hand, score, outcome
    if in_play:
        score -= 1
        outcome = "New round. Hit or stand?"
        return outcome
    dealer_hand = Hand()
    player_hand = Hand()
    deck = Deck()
    deck.shuffle() 
    
    for i in range(2):
        player_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
    in_play = True
    outcome = "Hit or stand?"
    

def hit():
    global outcome, in_play, score
    player_hand.add_card(deck.deal_card())
    outcome = "Hit or stand?"
    score -= 1
    if player_hand.get_value() > 21:
        outcome = "You have busted. New game?"
        score -= 1
        in_play = False
        return outcome
    pass
       
def stand():
    global outcome, in_play, score, wins
    wins = 0
    while dealer_hand.get_value() < 17:
        dealer_hand.add_card(deck.deal_card())
    if dealer_hand.get_value() > 21:
        outcome = "Dealer has busted. New game?"
        score += 1
        wins += 1
    else:
        if player_hand.get_value() > dealer_hand.get_value():
            outcome = "You beat the dealer and won! Play again?"
            score +=1
            wins += 1
        else:
            outcome = "Dealer won. Play again?"
            score -= 1
    in_play = False
    pass

# draw handler    
def draw(canvas):
    canvas.draw_text('Blackjack', (25, 250), 36, "yellow")  
    canvas.draw_text(outcome, (300, 250), 16, "white")  
    canvas.draw_text('Score = '+ str(score), (300, 275), 24, "White")  
    canvas.draw_text('Player', (25, 500), 20, "white")
    canvas.draw_text('Dealer', (25, 30), 20, "white")
    canvas.draw_text('Wins = ' + str(wins), (25, 515), 20, "white")
    dealer_hand.draw(canvas, [0, 100])    
    player_hand.draw(canvas, [0, 300])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [0 + CARD_BACK_CENTER[0], 100 + CARD_BACK_CENTER[1]], CARD_SIZE)    
    

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()
